{"name":"MRBrew","tagline":"An Objective-C wrapper library for the Homebrew package manager.","body":"## MRBrew [![Build Status](http://img.shields.io/travis/marcransome/MRBrew.svg)](https://travis-ci.org/marcransome/MRBrew)\r\nMRBrew is a simple Objective-C wrapper library for the [Homebrew](http://brew.sh) package manager.  It makes performing Homebrew operations from your apps a breeze:\r\n\r\n```objc\r\nMRBrewOperation *operation = [MRBrewOperation installOperation:[MRBrewFormula formulaWithName:@\"vim\"]];\r\n[[MRBrew sharedBrew] performOperation:operation delegate:nil];\r\n```\r\n\r\nNow you have a [powerful text editor](http://www.vim.org) installed. :beer:\r\n\r\n## Project integration\r\nMRBrew can be integrated into an existing project using [CocoaPods](http://cocoapods.org). Simply add the necessary dependency to your `Podfile` as follows:\r\n\r\n```ruby\r\nplatform :osx, '10.7'\r\npod 'MRBrew'\r\n...\r\n```\r\n\r\nThen install the dependency into your project:\r\n\r\n`$ pod install`\r\n\r\n## Prerequisites\r\n`MRBrew` depends on Homebrew for the heavy lifting, and assumes the default installation path of `/usr/local/bin/brew` (though this can be specified if the `brew` executable has been moved).  If you don't have Homebrew installed, follow the [official instructions](http://brew.sh) to get brewing.\r\n\r\n## General Usage\r\n\r\n#### Performing operations\r\nTo perform an operation, pass an `MRBrewOperation` object to the shared `MRBrew` instance using the `performOperation:delegate:` method.\r\n\r\nThe `MRBrewOperation` class provides a number of convenience methods for creating objects that represent common Homebrew operations:\r\n\r\n```objc\r\n+ (instancetype)updateOperation;\r\n+ (instancetype)listOperation;\r\n+ (instancetype)searchOperation:(MRBrewFormula *)formula;\r\n+ (instancetype)installOperation:(MRBrewFormula *)formula;\r\n+ (instancetype)infoOperation:(MRBrewFormula *)formula;\r\n+ (instancetype)removeOperation:(MRBrewFormula *)formula;\r\n+ (instancetype)optionsOperation:(MRBrewFormula *)formula;\r\n```\r\n\r\nFor example, the following code would perform a Homebrew `update` operation:\r\n\r\n```objc\r\n[[MRBrew sharedBrew] performOperation:[MRBrewOperation updateOperation] delegate:nil];\r\n```\r\n\r\nOperations that require a formula to be specified should be passed an `MRBrewFormula` object, which is just as easy to create. For example:\r\n\r\n```objc\r\nMRBrewOperation *operation = [MRBrewOperation installOperation:[MRBrewFormula formulaWithName:@\"appledoc\"]];\r\n[[MRBrew sharedBrew] performOperation:operation delegate:nil];\r\n```\r\n\r\nEach call to `performOperation:delegate:` spawns a subprocess in a separate thread that won't interrupt processing in the rest of your app.  Multiple operations can be performed by making repeated calls to `performOperation:delegate:`.  Operations are placed into a queue and executed concurrently. If you would prefer operations to execute in series, just call `[MRBrew setConcurrentOperations:NO]`.\r\n\r\n**Note:** All operations performed by the `MRBrew` class inherit the environment from which those operation were launched. Use `setEnvironment:` to define your own environment variables.\r\n\r\n#### Custom operations\r\nThe convenience methods provided by `MRBrewOperation` cover only a small subset of the actual operations supported by Homebrew.  To perform an operation that does not already have an associated convenience method defined, use the following `MRBrewOperation` class method when creating your operation object:\r\n\r\n```objc\r\n+ (instancetype)operationWithName:(NSString *)name\r\n                          formula:(MRBrewFormula *)formula\r\n                       parameters:(NSArray *)parameters;\r\n```\r\n\r\nSpecify the operation name exactly as defined by Homebrew (e.g. `@\"upgrade\"`). Both `formula` and `parameters` may be optional depending upon the operation being performed (see *man brew* for more details).\r\n\r\n#### Handling operation output\r\nYou'll probably want to be notified when an operation has finished, failed, or generated output.  This can be achieved using the delegate pattern by implementing the `MRBrewDelegate` protocol in your controller and specifying the following optional methods:\r\n\r\n```objc\r\n- (void)brewOperationDidFinish:(MRBrewOperation *)operation;\r\n- (void)brewOperation:(MRBrewOperation *)operation didFailWithError:(NSError *)error;\r\n- (void)brewOperation:(MRBrewOperation *)operation didGenerateOutput:(NSString *)output;\r\n```\r\n\r\nNow, whenever you perform an operation with `performOperation:delegate:`, specify your controller object as the delegate in order to receive callbacks when an operation has finished, failed, or generated output:\r\n\r\n```objc\r\n[[MRBrew sharedBrew] performOperation:[MRBrewOperation updateOperation] delegate:controller];\r\n```\r\n\r\nIf you expect your controller to manage (and therefore receive callbacks for) multiple types of operation, you should inspect the `MRBrewOperation` object in your delegate methods to determine how to respond to particular types of operation:\r\n\r\n```objc\r\n- (void)brewOperation:(MRBrewOperation *)operation didGenerateOutput:(NSString *)output\r\n{\r\n    if ([[operation name] isEqualToString:MRBrewOperationUpdateIdentifier]) {\r\n        // an update operation produced output\r\n    }\r\n    else if ([[operation name] isEqualToString:MRBrewOperationInstallIdentifier]) {\r\n        // an install operation produced output\r\n    }\r\n    ...\r\n}\r\n```\r\nThe constants referenced above can be found in the `MRBrewConstants.h` header and are used to determine the type of operation received by your delegate methods.  Import this header in your delegate implementation if you plan to use these constants.\r\n\r\nIf you are responding to a custom operation that does not already have a constant defined, simply provide your own, or use a string literal:\r\n\r\n```objc\r\nif ([[operation name] isEqualToString:@\"audit\"]) {\r\n    // an audit operation produced output\r\n}\r\n```\r\n\r\nAlternatively, if you need to respond in your delegate methods to a specific operation, use the `isEqualToOperation:` method of the `MRBrewOperation` class to confirm the operation that generated the callback and respond accordingly.\r\n\r\n#### Cancelling operations\r\nOperations can be cancelled using one of the following `MRBrew` instance methods (remember to obtain a a reference to the shared `MRBrew` instance using the `+sharedBrew` class method first):\r\n\r\n```objc\r\n- (void)cancelAllOperations;\r\n- (void)cancelOperation:(MRBrewOperation *)operation;\r\n- (void)cancelAllOperationsOfType:(MRBrewOperationType)type;\r\n```\r\n\r\n#### Miscellaneous\r\nIf the `brew` executable has been moved outside of the default `/usr/local/bin/` directory (generally not advisable), specify its location before performing any operations:\r\n\r\n```objc\r\n[[MRBrew sharedBrew] setBrewPath:@\"/usr/bin/brew\"];\r\n```\r\n\r\nThis call only needs to be made once per project.\r\n\r\n## Contributions\r\nIf you plan to contribute to the MRBrew project, [fork the repository](https://help.github.com/articles/fork-a-repo), make your code changes, then submit a pull request with a brief description of your feature or bug fix.  Test suites and unit tests are provided for the `MRBrewTests` target, and additional test methods should be added where necessary.\r\n\r\n## Documentation\r\nVisit [CocoaDocs](http://cocoadocs.org/docsets/MRBrew/) for additional documentation, or alternatively inspect the header files directly.\r\n\r\n## Caveats\r\nThe source code for `MRBrew` uses Automatic Reference Counting and has only been tested against 10.7â€”10.9 deployment targets.\r\n\r\n## License\r\n`MRBrew` is provided under the terms of the [MIT License](http://opensource.org/licenses/mit-license.php).\r\n\r\n## Acknowledgements\r\nThe following libraries were used in the making of `MRBrew`:\r\n\r\n* [OCMock](http://ocmock.org) by Mulle Kybernetik\r\n\r\n## Contact\r\nEmail me at [marc.ransome@fidgetbox.co.uk](mailto:marc.ransome@fidgetbox.co.uk) or tweet [@marcransome](http://www.twitter.com/marcransome).\r\n","google":"UA-31478860-1","note":"Don't delete this file! It's used internally to help with page regeneration."}